% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/googleAuthR_shiny.R
\name{renderLogin}
\alias{renderLogin}
\title{Render a Google API Authentication Login/logout button}
\usage{
renderLogin(session, access_token, login_text = "Login via Google",
  logout_text = "Logout", login_class = "btn btn-primary",
  logout_class = "btn btn-default")
}
\arguments{
\item{session}{A Shiny session object}

\item{access_token}{A token generated by \code{reactiveAccessToken}}

\item{login_text}{What the login text will read on the button}

\item{logout_text}{What the logout text will read on the button}

\item{login_class}{The Bootstrap class for the login link}

\item{logout_class}{The Bootstrap class for the logout link}
}
\value{
An object to assign to output e.g. output$login
}
\description{
Use within a Shiny server.R to assign to an output for ui.R.
The login button carries an ActionLink with value "signed_in".
}
\examples{
\dontrun{
## in server.R
shinyServer(function(input, output, session)){

  ## Get auth code from return URL
  access_token  <- reactiveAccessToken(session)

  ## Make a loginButton to display using loginOutput
  output$loginButton <- renderLogin(session, access_token())

  output$websites <- renderTable({

    ## using with_shiny adds a shiny_access_token parameter to pass access_token()
    list_websites <- with_shiny(list_websites,
                                access_token())

    })

}

## in ui.R
shinyUI(fluidPage(
  loginOutput("loginButton"),
  renderTable("websites)
  ))
}
}
\seealso{
Other shiny auth functions: \code{\link{authReturnCode}};
  \code{\link{createCode}};
  \code{\link{gar_shiny_getAuthUrl}};
  \code{\link{gar_shiny_getToken}};
  \code{\link{gar_shiny_getUrl}};
  \code{\link{loginOutput}};
  \code{\link{reactiveAccessToken}};
  \code{\link{with_shiny}}
}

